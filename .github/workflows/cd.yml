name: Continuous Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  
jobs:
  # Only run if CI passed
  check-ci:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    steps:
      - name: CI Status Check
        run: echo "CI passed, proceeding with deployment"

  # Detect changes
  changes:
    runs-on: ubuntu-latest
    needs: check-ci
    outputs:
      billing: ${{ steps.changes.outputs.billing }}
      migrations: ${{ steps.changes.outputs.migrations }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            billing:
              - 'api/billing/**'
            migrations:
              - 'api/billing-dbmigrations/**'

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [check-ci, changes]
    if: ${{ needs.changes.outputs.billing == 'true' || needs.changes.outputs.migrations == 'true' }}
    environment: 
      name: staging
      url: https://billing-staging.apps.openshift.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4.12
      
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }}
          oc project billing-staging
      
      - name: Deploy Database Migrations
        if: ${{ needs.changes.outputs.migrations == 'true' }}
        run: |
          # Update image in deployment
          oc set image deployment/billing-migrations \
            billing-migrations=${{ env.REGISTRY }}/${{ github.repository }}/billing-dbmigrations:${{ github.sha }}
          
          # Wait for rollout
          oc rollout status deployment/billing-migrations --timeout=300s
      
      - name: Deploy API Service
        if: ${{ needs.changes.outputs.billing == 'true' }}
        run: |
          # Update image in deployment
          oc set image deployment/billing-api \
            billing-api=${{ env.REGISTRY }}/${{ github.repository }}/billing:${{ github.sha }}
          
          # Wait for rollout
          oc rollout status deployment/billing-api --timeout=300s
      
      - name: Verify Deployment
        run: |
          # Check if pods are running
          oc get pods -l app=billing-api
          oc get pods -l app=billing-migrations
          
          # Test health endpoint
          ROUTE=$(oc get route billing-api -o jsonpath='{.spec.host}')
          curl -f https://$ROUTE/health || exit 1
      
      - name: Run Smoke Tests
        run: |
          ROUTE=$(oc get route billing-api -o jsonpath='{.spec.host}')
          
          # Test API endpoints
          curl -f https://$ROUTE/api/v1/clients || exit 1
          curl -f https://$ROUTE/api/v1/invoices || exit 1
          
          echo "Smoke tests passed"

  # E2E Tests against staging
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: ${{ needs.changes.outputs.billing == 'true' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      
      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4.12
      
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }}
          oc project billing-staging
      
      - name: Run E2E Tests
        working-directory: ./api/billing
        env:
          E2E_BASE_URL: https://$(oc get route billing-api -o jsonpath='{.spec.host}')
          E2E_TIMEOUT: 300s
        run: |
          go test -v -timeout 600s -tags=e2e ./tests/e2e/...

  # Deploy to production (manual approval)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging, e2e-tests]
    if: ${{ needs.changes.outputs.billing == 'true' || needs.changes.outputs.migrations == 'true' }}
    environment: 
      name: production
      url: https://billing.apps.openshift.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4.12
      
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }}
          oc project billing-production
      
      - name: Deploy Database Migrations
        if: ${{ needs.changes.outputs.migrations == 'true' }}
        run: |
          # Backup database before migrations
          oc create job billing-backup-$(date +%Y%m%d-%H%M%S) \
            --from=cronjob/billing-backup || echo "No backup cronjob configured"
          
          # Run migrations
          oc set image deployment/billing-migrations \
            billing-migrations=${{ env.REGISTRY }}/${{ github.repository }}/billing-dbmigrations:${{ github.sha }}
          
          oc rollout status deployment/billing-migrations --timeout=600s
      
      - name: Deploy API Service
        if: ${{ needs.changes.outputs.billing == 'true' }}
        run: |
          # Blue-green deployment strategy
          oc set image deployment/billing-api \
            billing-api=${{ env.REGISTRY }}/${{ github.repository }}/billing:${{ github.sha }}
          
          # Wait for new pods to be ready
          oc rollout status deployment/billing-api --timeout=600s
          
          # Verify health
          sleep 30
          oc exec deployment/billing-api -- curl -f http://localhost:8080/health
      
      - name: Verify Production Deployment
        run: |
          # Check deployment status
          oc get pods -l app=billing-api
          
          # Test external endpoint
          ROUTE=$(oc get route billing-api -o jsonpath='{.spec.host}')
          curl -f https://$ROUTE/health || exit 1
          
          # Check metrics endpoint if available
          curl -f https://$ROUTE/metrics || echo "Metrics endpoint not available"
      
      - name: Notify Deployment Success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful"
          echo "üîó Application URL: https://$(oc get route billing-api -o jsonpath='{.spec.host}')"
      
      - name: Rollback on Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed, rolling back"
          oc rollout undo deployment/billing-api
          oc rollout status deployment/billing-api --timeout=300s

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Cleanup old container images
        run: |
          # Keep last 10 images, delete older ones
          echo "Container cleanup would run here"
          # Implementation would use GitHub API to delete old packages