name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - '.github/workflows/ci.yml'

env:
  REGISTRY: ghcr.io
  GO_VERSION: '1.22'

jobs:
  # Detect which modules changed to run targeted builds
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      billing: ${{ steps.changes.outputs.billing }}
      billing-dbmigrations: ${{ steps.changes.outputs.billing-dbmigrations }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            billing:
              - 'api/billing/**'
            billing-dbmigrations:
              - 'api/billing-dbmigrations/**'

  # Test and build billing service
  test-billing:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.billing == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: billing_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-billing-${{ hashFiles('api/billing/go.sum') }}

      - name: Install dependencies
        working-directory: ./api/billing
        run: go mod download

      - name: Run migrations for tests
        working-directory: ./api/billing-dbmigrations
        env:
          BILLING_MIGRATE_DATABASE_HOST: localhost
          BILLING_MIGRATE_DATABASE_PORT: 5432
          BILLING_MIGRATE_DATABASE_USER: postgres
          BILLING_MIGRATE_DATABASE_PASSWORD: password
          BILLING_MIGRATE_DATABASE_NAME: billing_test
          BILLING_MIGRATE_DATABASE_SSLMODE: disable
        run: |
          go mod download
          go run cmd/migrate/*.go up

      - name: Run tests
        working-directory: ./api/billing
        env:
          BILLING_DATABASE_HOST: localhost
          BILLING_DATABASE_PORT: 5432
          BILLING_DATABASE_USERNAME: postgres
          BILLING_DATABASE_PASSWORD: password
          BILLING_DATABASE_NAME: billing_test
          BILLING_DATABASE_SSL_MODE: disable
          APP_ENV: test
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: billing-coverage
          path: |
            api/billing/coverage.out
            api/billing/coverage.html

      - name: Run integration tests
        working-directory: ./api/billing
        env:
          BILLING_DATABASE_HOST: localhost
          BILLING_DATABASE_PORT: 5432
          BILLING_DATABASE_USERNAME: postgres
          BILLING_DATABASE_PASSWORD: password
          BILLING_DATABASE_NAME: billing_test
          BILLING_DATABASE_SSL_MODE: disable
          APP_ENV: test
        run: go test -v -tags=integration ./tests/integration/...

      - name: Run linting (if available)
        working-directory: ./api/billing
        continue-on-error: true
        run: |
          if command -v golangci-lint &> /dev/null; then
            golangci-lint run
          else
            echo "golangci-lint not available, skipping"
          fi

  # Test and build migrations service
  test-migrations:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.billing-dbmigrations == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: billing_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-migrations-${{ hashFiles('api/billing-dbmigrations/go.sum') }}

      - name: Install dependencies
        working-directory: ./api/billing-dbmigrations
        run: go mod download

      - name: Test migration commands
        working-directory: ./api/billing-dbmigrations
        env:
          BILLING_MIGRATE_DATABASE_HOST: localhost
          BILLING_MIGRATE_DATABASE_PORT: 5432
          BILLING_MIGRATE_DATABASE_USER: postgres
          BILLING_MIGRATE_DATABASE_PASSWORD: password
          BILLING_MIGRATE_DATABASE_NAME: billing_test
          BILLING_MIGRATE_DATABASE_SSLMODE: disable
        run: |
          # Test migration up
          go run cmd/migrate/*.go up
          
          # Test migration down
          go run cmd/migrate/*.go down
          
          # Test migration up again
          go run cmd/migrate/*.go up
          
          # Test version command
          go run cmd/migrate/*.go version

      - name: Test health server
        working-directory: ./api/billing-dbmigrations
        env:
          BILLING_MIGRATE_DATABASE_HOST: localhost
          BILLING_MIGRATE_DATABASE_PORT: 5432
          BILLING_MIGRATE_DATABASE_USER: postgres
          BILLING_MIGRATE_DATABASE_PASSWORD: password
          BILLING_MIGRATE_DATABASE_NAME: billing_test
          BILLING_MIGRATE_DATABASE_SSLMODE: disable
        run: |
          # Start health server in background
          timeout 10s go run cmd/health/*.go &
          
          # Wait a moment for server to start
          sleep 3
          
          # Test health endpoint
          curl -f http://localhost:8081/health || exit 1

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.billing == 'true' || needs.detect-changes.outputs.billing-dbmigrations == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './api'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build container images
  build-images:
    runs-on: ubuntu-latest
    needs: [test-billing, test-migrations, security-scan]
    if: always() && (needs.test-billing.result == 'success' || needs.test-migrations.result == 'success')
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - module: billing
            condition: ${{ needs.detect-changes.outputs.billing == 'true' && needs.test-billing.result == 'success' }}
          - module: billing-dbmigrations
            condition: ${{ needs.detect-changes.outputs.billing-dbmigrations == 'true' && needs.test-migrations.result == 'success' }}

    steps:
      - name: Skip if condition not met
        if: ${{ !matrix.condition }}
        run: echo "Skipping ${{ matrix.module }} - condition not met"

      - name: Checkout code
        if: ${{ matrix.condition }}
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        if: ${{ matrix.condition }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: ${{ matrix.condition }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.module }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        if: ${{ matrix.condition }}
        uses: docker/build-push-action@v5
        with:
          context: ./api/${{ matrix.module }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy on built image
        if: ${{ matrix.condition }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.module }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-${{ matrix.module }}.sarif'

      - name: Upload image scan results
        if: ${{ matrix.condition }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-${{ matrix.module }}.sarif'
          category: 'trivy-image-${{ matrix.module }}'

  # Quality gates
  quality-gate:
    runs-on: ubuntu-latest
    needs: [test-billing, test-migrations, security-scan, build-images]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Test billing: ${{ needs.test-billing.result }}"
          echo "Test migrations: ${{ needs.test-migrations.result }}"
          echo "Security scan: ${{ needs.security-scan.result }}"
          echo "Build images: ${{ needs.build-images.result }}"
          
          # Fail if any required job failed
          if [[ "${{ needs.test-billing.result }}" == "failure" ]] || \
             [[ "${{ needs.test-migrations.result }}" == "failure" ]] || \
             [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "❌ Quality gate failed - critical jobs failed"
            exit 1
          fi
          
          echo "✅ Quality gate passed"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always() && github.event_name == 'push'
    
    steps:
      - name: Notify success
        if: needs.quality-gate.result == 'success'
        run: |
          echo "🎉 CI pipeline completed successfully"
          echo "📦 Container images built and scanned"
          echo "🛡️ Security checks passed"
          echo "✅ Ready for deployment"

      - name: Notify failure
        if: needs.quality-gate.result != 'success'
        run: |
          echo "❌ CI pipeline failed"
          echo "🔍 Check the workflow logs for details"
          echo "🛠️ Fix issues before merging"