name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - '.github/workflows/ci.yml'

env:
  REGISTRY: ghcr.io
  
jobs:
  # Detect which modules changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      billing: ${{ steps.changes.outputs.billing }}
      migrations: ${{ steps.changes.outputs.migrations }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            billing:
              - 'api/billing/**'
            migrations:
              - 'api/billing-dbmigrations/**'

  # Lint and test
  test:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.billing == 'true' || needs.changes.outputs.migrations == 'true' }}
    
    strategy:
      matrix:
        module: 
          - billing
          - billing-dbmigrations
        exclude:
          - module: billing
            exclude: ${{ needs.changes.outputs.billing != 'true' }}
          - module: billing-dbmigrations  
            exclude: ${{ needs.changes.outputs.migrations != 'true' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: billing_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.module }}-${{ hashFiles('api/${{ matrix.module }}/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.module }}-
      
      - name: Install dependencies
        working-directory: ./api/${{ matrix.module }}
        run: go mod download
      
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./api/${{ matrix.module }}
          args: --timeout=5m
      
      - name: Run tests
        working-directory: ./api/${{ matrix.module }}
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: password
          TEST_DB_NAME: billing_test
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./api/${{ matrix.module }}/coverage.out
          flags: ${{ matrix.module }}
          name: ${{ matrix.module }}-coverage
          
      - name: Security scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'gosec-report.sarif'
        continue-on-error: true

  # Build Docker images
  build:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: ${{ needs.changes.outputs.billing == 'true' || needs.changes.outputs.migrations == 'true' }}
    
    strategy:
      matrix:
        module:
          - billing
          - billing-dbmigrations
        exclude:
          - module: billing
            exclude: ${{ needs.changes.outputs.billing != 'true' }}
          - module: billing-dbmigrations  
            exclude: ${{ needs.changes.outputs.migrations != 'true' }}
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.module }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api/${{ matrix.module }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.module }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: ${{ needs.changes.outputs.billing == 'true' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: billing_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run integration tests
        working-directory: ./api/billing
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: password
          TEST_DB_NAME: billing_integration_test
        run: |
          go test -v -tags=integration ./tests/integration/...

  # Quality gate
  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, build, integration-test]
    if: always()
    
    steps:
      - name: Check quality gate
        run: |
          if [[ "${{ needs.test.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" || 
                "${{ needs.integration-test.result }}" != "success" ]]; then
            echo "Quality gate failed"
            exit 1
          fi
          echo "Quality gate passed"